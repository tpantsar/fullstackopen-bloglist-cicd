name: Deployment Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    types: [opened, synchronize] # workflow will run when a PR into the main branch is opened or updated

env:
  URL: https://full-stack-open-pokedex-vr42.onrender.com/ # URL of the deployed application
  color_success: 65280 # green
  color_failure: 16711680 # red

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install Dependencies
        run: npm ci
      - name: Run Linter
        run: npm run lint

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install Dependencies
        run: npm ci
      - name: Build Application
        run: npm run build
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist/
          retention-days: 7
      - name: Notify Discord on Build Failure
        uses: Ilshidur/action-discord@08d9328877d6954120eef2b07abbc79249bb6210
        if: failure()
        with:
          args: " "  # Required argument (but empty since we use DISCORD_EMBEDS)
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          DISCORD_EMBEDS: >
            [{
              "title": "❌Build failed!",
              "description": "Commit: [${{ github.event.head_commit.id }}](${{ github.event.head_commit.url }})",
              "color": ${{env.color_failure}},
              "fields": [
                {
                  "name": "Commit message",
                  "value": "${{ github.event.head_commit.message }}",
                  "inline": false
                },
                {
                  "name": "Workflow",
                  "value": "${{ github.workflow }}",
                  "inline": false
                }
              ],
              "timestamp": "${{ github.event.head_commit.timestamp || github.event.pull_request.updated_at }}"
            }]
          
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: [build, lint]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install Dependencies
        run: npm ci
      - name: Run Unit Tests
        run: npm run test

  e2e:
    name: Run End-to-End Tests
    runs-on: ubuntu-latest
    needs: [test, build, lint]
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'
      - name: Install Dependencies
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run Playwright Tests
        run: npx playwright test
      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  deploy:
    # only run if the commit message does not contain #skip
    if: ${{ github.event_name == 'push' && !contains(github.event.head_commit.message, '#skip') }}
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [e2e, test, build, lint]
    steps:
      - name: Commit message
        env:
          COMMIT_MESSAGES: ${{ toJson(github.event.head_commit.message) }} # log commit message
        run: echo "$COMMIT_MESSAGES"
      - name: Trigger Deployment
        run: |
          curl --request POST \
            --url https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys \
            --header 'accept: application/json' \
            --header 'authorization: Bearer ${{ secrets.RENDER_API_KEY }}' \
            --header 'content-type: application/json' \
            --data '{"clearCache": "do_not_clear"}'
      - name: Notify Discord on Deploy Success
        uses: Ilshidur/action-discord@08d9328877d6954120eef2b07abbc79249bb6210
        if: success()
        with:
          args: " "  # Required argument (but empty since we use DISCORD_EMBEDS)
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          DISCORD_EMBEDS: >
            [{
              "title": "✅New version deployed!",
              "description": "Url: ${{env.URL}}",
              "color": ${{env.color_success}},
              "timestamp": "${{ github.event.head_commit.timestamp || github.event.pull_request.updated_at }}"
            }]

  tag_release:
    # only run if the commit message does not contain #skip
    if: ${{ github.event_name == 'push' && !contains(github.event.head_commit.message, '#skip') }}
    name: Tag Release
    runs-on: ubuntu-latest
    needs: [deploy, e2e, test, build, lint]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure the full history is fetched
      - name: Github context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }} # log github context
        run: echo "$GITHUB_CONTEXT"
      - name: Commits
        env:
          COMMITS: ${{ toJson(github.event.commits) }} # log commits
        run: echo "$COMMITS"
      - name: Commit message
        env:
          COMMIT_MESSAGES: ${{ toJson(github.event.head_commit.message) }} # log commit message
        run: echo "$COMMIT_MESSAGES"
      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@f278d49d30cdd8775cc3e7dd00b5ee11686ee297
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch